// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sudo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SudoClient is the client API for Sudo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SudoClient interface {
	StreamStdIn(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Sudo_StreamStdInClient, error)
	StreamStdOut(ctx context.Context, opts ...grpc.CallOption) (Sudo_StreamStdOutClient, error)
	StreamStdErr(ctx context.Context, opts ...grpc.CallOption) (Sudo_StreamStdErrClient, error)
	Exit(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*Empty, error)
}

type sudoClient struct {
	cc grpc.ClientConnInterface
}

func NewSudoClient(cc grpc.ClientConnInterface) SudoClient {
	return &sudoClient{cc}
}

func (c *sudoClient) StreamStdIn(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Sudo_StreamStdInClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sudo_ServiceDesc.Streams[0], "/sudo.Sudo/StreamStdIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &sudoStreamStdInClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sudo_StreamStdInClient interface {
	Recv() (*StdIo, error)
	grpc.ClientStream
}

type sudoStreamStdInClient struct {
	grpc.ClientStream
}

func (x *sudoStreamStdInClient) Recv() (*StdIo, error) {
	m := new(StdIo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sudoClient) StreamStdOut(ctx context.Context, opts ...grpc.CallOption) (Sudo_StreamStdOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sudo_ServiceDesc.Streams[1], "/sudo.Sudo/StreamStdOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &sudoStreamStdOutClient{stream}
	return x, nil
}

type Sudo_StreamStdOutClient interface {
	Send(*StdIo) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type sudoStreamStdOutClient struct {
	grpc.ClientStream
}

func (x *sudoStreamStdOutClient) Send(m *StdIo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sudoStreamStdOutClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sudoClient) StreamStdErr(ctx context.Context, opts ...grpc.CallOption) (Sudo_StreamStdErrClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sudo_ServiceDesc.Streams[2], "/sudo.Sudo/StreamStdErr", opts...)
	if err != nil {
		return nil, err
	}
	x := &sudoStreamStdErrClient{stream}
	return x, nil
}

type Sudo_StreamStdErrClient interface {
	Send(*StdIo) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type sudoStreamStdErrClient struct {
	grpc.ClientStream
}

func (x *sudoStreamStdErrClient) Send(m *StdIo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sudoStreamStdErrClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sudoClient) Exit(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/sudo.Sudo/Exit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SudoServer is the server API for Sudo service.
// All implementations must embed UnimplementedSudoServer
// for forward compatibility
type SudoServer interface {
	StreamStdIn(*Empty, Sudo_StreamStdInServer) error
	StreamStdOut(Sudo_StreamStdOutServer) error
	StreamStdErr(Sudo_StreamStdErrServer) error
	Exit(context.Context, *ExitRequest) (*Empty, error)
	mustEmbedUnimplementedSudoServer()
}

// UnimplementedSudoServer must be embedded to have forward compatible implementations.
type UnimplementedSudoServer struct {
}

func (UnimplementedSudoServer) StreamStdIn(*Empty, Sudo_StreamStdInServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStdIn not implemented")
}
func (UnimplementedSudoServer) StreamStdOut(Sudo_StreamStdOutServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStdOut not implemented")
}
func (UnimplementedSudoServer) StreamStdErr(Sudo_StreamStdErrServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStdErr not implemented")
}
func (UnimplementedSudoServer) Exit(context.Context, *ExitRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exit not implemented")
}
func (UnimplementedSudoServer) mustEmbedUnimplementedSudoServer() {}

// UnsafeSudoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SudoServer will
// result in compilation errors.
type UnsafeSudoServer interface {
	mustEmbedUnimplementedSudoServer()
}

func RegisterSudoServer(s grpc.ServiceRegistrar, srv SudoServer) {
	s.RegisterService(&Sudo_ServiceDesc, srv)
}

func _Sudo_StreamStdIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SudoServer).StreamStdIn(m, &sudoStreamStdInServer{stream})
}

type Sudo_StreamStdInServer interface {
	Send(*StdIo) error
	grpc.ServerStream
}

type sudoStreamStdInServer struct {
	grpc.ServerStream
}

func (x *sudoStreamStdInServer) Send(m *StdIo) error {
	return x.ServerStream.SendMsg(m)
}

func _Sudo_StreamStdOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SudoServer).StreamStdOut(&sudoStreamStdOutServer{stream})
}

type Sudo_StreamStdOutServer interface {
	SendAndClose(*Empty) error
	Recv() (*StdIo, error)
	grpc.ServerStream
}

type sudoStreamStdOutServer struct {
	grpc.ServerStream
}

func (x *sudoStreamStdOutServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sudoStreamStdOutServer) Recv() (*StdIo, error) {
	m := new(StdIo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Sudo_StreamStdErr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SudoServer).StreamStdErr(&sudoStreamStdErrServer{stream})
}

type Sudo_StreamStdErrServer interface {
	SendAndClose(*Empty) error
	Recv() (*StdIo, error)
	grpc.ServerStream
}

type sudoStreamStdErrServer struct {
	grpc.ServerStream
}

func (x *sudoStreamStdErrServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sudoStreamStdErrServer) Recv() (*StdIo, error) {
	m := new(StdIo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Sudo_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SudoServer).Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sudo.Sudo/Exit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SudoServer).Exit(ctx, req.(*ExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sudo_ServiceDesc is the grpc.ServiceDesc for Sudo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sudo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sudo.Sudo",
	HandlerType: (*SudoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exit",
			Handler:    _Sudo_Exit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStdIn",
			Handler:       _Sudo_StreamStdIn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamStdOut",
			Handler:       _Sudo_StreamStdOut_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamStdErr",
			Handler:       _Sudo_StreamStdErr_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sudo.proto",
}
